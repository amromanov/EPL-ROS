module powerlink_rhub_pdo_recv #(parameter master = 0   //?Y?°Nˆ?°???µN‚Nˆ ????Nˆ?µ???µ?»N??µN‚, N‡N‚?? ?????»?¶?µ?? ???¶?????°N‚N?
)(                                                      //??????N??»N? ?·?°??Nˆ??N? ??N‚ ???°N?N‚?µNˆ?° ???»?? ??N‚???µN‚ ??N‚ N??»?µ?????°
    input rst,                     //??N?????N…Nˆ??????N‹?? N??±Nˆ??N?
    input clk,                     //???°??N‚????N‹?? ???µ???µNˆ?°N‚??Nˆ
    input [7:0]node,               //????N? node powerlink, ????N‚??NˆN‹?? ???°???? ?·?°Nˆ?µ?·?µNˆ????Nˆ?????°N‚N?
    /*input rm_clk,*/                  //RMI Clock    
    input [1:0]rm_rx,              //RMI Rx
    input rm_crs_dv,               //RMI CRS
    output reg pdo_st              //??N‚Nˆ???± ??Nˆ??N…?????° ???°???µN‚?°
	 //inout [35:0] control
);

wire rx_rdy;                //??N‚Nˆ???± ??Nˆ??N…?????° ??N‡?µNˆ?µ?????????? ?±?°??N‚?°
wire [7:0]rx_data;          //?"?°????N‹?µ ???· ??N‡?µNˆ?µ?????????? ?±?°??N‚?°
wire rx_busy;               //?¤?»?°?? N‚??????, N‡N‚?? ?????µN‚ ethernet ???°???µN‚

/*rmii_recv_byte rmii_recv_byte(
	.rst(rst),
	.clk(clk),
	.rmii_clk(rm_clk),
	.fast_eth(1),
	.rm_rx_data(rm_rx),
	.rm_crs_dv(rm_crs_dv),
	.data(rx_data),
	.rdy(rx_rdy),
	.busy(rx_busy)
);*/
rmii_recv_byte_50_MHz rmii_recv_byte (
	.rst(rst),
	.clk(clk),
	.fast_eth(1'b1),
	.rm_rx_data(rm_rx),
	.rm_crs_dv(rm_crs_dv),
	.data(rx_data),
	.rdy(rx_rdy),
	.busy(rx_busy)
);

reg [11:0] state_m;        //??N??»??????N‹?? ???????µNˆ ??Nˆ????N?N‚?????? ?±?°??N‚?° ???»?? st_idle (12 ?±??N‚, N‡N‚???±N‹ N‚??N‡???? ???µNˆ?µ???°Nˆ??N‚N? Ethernet ???°???µN‚ ?»NZ?±?????? Nˆ?°?·???µNˆ?°)
parameter st_idle = 8;     //C??N?N‚??N??????µ ???¶?????°????N? (???»N? N??????±N?N‚???° ??N‹?±Nˆ?°?? ???????µNˆ ???µNˆ???????? ?±?°??N‚?° ????N??»?µ ??Nˆ???°???±N??»N‹) 

reg [8:0]cmp_data;         //?"?°????N‹?µ, ????N‚??NˆN‹?µ ???°???? N?Nˆ?°??????N‚N? ?? ??Nˆ?????????°?µ?????? ???°???µN‚?µ, N‡N‚???±N‹ ??????N?N‚N?, N‡N‚?? ?µ???? ???°???? ??N‚N??µ??N‚N?. ?•????????N†?° ?? 9 ?±??N‚?µ ???·???°N‡?°?µN‚, N‡N‚?? N?N‚???? ?±?°??N‚ N?Nˆ?°?????????°N‚N? ???µ ???°????
                           //??.?µ. cmp_data=9'd256 ???±???·???°N‡?°?µN‚ '???µ ??Nˆ?????µNˆN?N‚N?'
always @(posedge clk, posedge rst)
    if(rst)
        cmp_data = 9'd256;
    else
    case(state_m)   //?' case ??N??µ ???????µNˆ N????µ??N?N??µ??N‹ ???° 1, N‚.??. cmp_data ???±????????N‚N?N? N‚???»N????? ???° N??»?µ??N?NZN‰?µ?? N‚?°??N‚?µ ????N??»?µ ??Nˆ??N…?????° N?????N‚???µN?N‚??N?NZN‰?µ???? ?·???°N‡?µ????N? state_m
      default  : cmp_data = 9'd256;     //?'N??µ ?±?°??N‚N‹ ???µ ??????N??°????N‹?µ ?????¶?µ ?? case ???µ ??Nˆ?????µNˆN?NZN‚N?N?
//--------------Ethernet ???°???µN‚--------------//
            20 : cmp_data = 9'h88;      //?????? ??Nˆ??N‚???????»?° - IP (0x88AB)        
            21 : cmp_data = 9'hAB;          
//--------------Powerlink ???°???µN‚-------------//
            22 : begin                           //?????? N??????±N‰?µ????N?
                    if(master)                   
                        cmp_data = {1'b0,/*rx_data[7],*/8'h03};  //?"?»N? ???°N?N‚?µNˆ?° PReq
                    else
                        cmp_data = {1'b0,/*rx_data[7],*/8'h04};  //?"?»N? N??»?µ?????° PRes
                 end     
            23 : begin                           //Node ??N?N‚??N‡???????° (??N‚??Nˆ?°??????N??µ???? N?N?N‚Nˆ????N?N‚???°)
                    if(!master)                   
                        cmp_data = 9'd256;       //?"?»N? ???°N?N‚?µNˆ?° ???µ ??Nˆ?????µNˆN??µN‚N?N?
                    else
                        cmp_data = 9'd256;  //?"?»N? N??»?µ?????° ??N?N‚??N‡?????????? ?????»?¶?µ?? ?±N‹N‚N? ????Nˆ?µ???µ?»?µ????N‹?? node
                 end 
            24 : begin                           //Node ??Nˆ???µ?????????° (N?N?N‚Nˆ????N?N‚???° ????N‚??Nˆ????N? ????N??»?°?»??)
                    if(!master)                   
                        cmp_data = 9'd256;  //?"?»N? ???°N?N‚?µNˆ?° N?N‚?? ?????»?¶?µ?? ?±N‹N‚N? ???????µNˆ Nˆ?µ?·?µNˆ????NˆN??µ???????? N??»?µ?????°
                    else
                        cmp_data = 9'd256;       //?"?»N? N??»?µ?????° ???µ ??Nˆ?????µNˆN??µN‚N?N?
                 end   
         endcase

///reg [8:0]cmp_data2; 		 
//always @(posedge clk, posedge rst)
//    if(rst)
//        cmp_data2 = 9'd256;
//    else
//    case(state_m)   //?' case ??N??µ ???????µNˆ N????µ??N?N??µ??N‹ ???° 1, N‚.??. cmp_data ???±????????N‚N?N? N‚???»N????? ???° N??»?µ??N?NZN‰?µ?? N‚?°??N‚?µ ????N??»?µ ??Nˆ??N…?????° N?????N‚???µN?N‚??N?NZN‰?µ???? ?·???°N‡?µ????N? state_m
//      default  : cmp_data2 = 9'd256;     //?'N??µ ?±?°??N‚N‹ ???µ ??????N??°????N‹?µ ?????¶?µ ?? case ???µ ??Nˆ?????µNˆN?NZN‚N?N?
////--------------Ethernet ???°???µN‚--------------//         
////--------------Powerlink ???°???µN‚-------------//
//            22 : begin                           //?????? N??????±N‰?µ????N?
//                    if(master)                   
//                        cmp_data2 = {1'b0,/*rx_data[7],*/8'h05};  //?"?»N? ???°N?N‚?µNˆ?° PReq
//                    else
//                        cmp_data2 = {1'b0,/*rx_data[7],*/8'h06};  //?"?»N? N??»?µ?????° PRes
//                 end        
//         endcase		 
		 
		 
		 
		 
		 
    parameter  last_head = 25; //???????µNˆ ????N??»?µ?????µ???? ?°???°?»???·??NˆN??µ???????? ?±?°??N‚?° ???°???µN‚?°. ???° ??N?N??????? N??»N?N‡?°?? 
                               //??N‹?±Nˆ?°?? ???° 1 ?±???»N?N??µ ????N??»?µ?????µ???? ?±?°??N‚?°, ????N‚??NˆN‹?? ???°N? ????N‚?µNˆ?µN?N??µN‚,
                               //N‡N‚???±N‹ N‚??N‡???? ??N??µ ???±Nˆ?°?±??N‚?°N‚N?
    
    reg fault;      //???»N??¶?µ?±???°N? ???µNˆ?µ???µ?????°N?, ???????°?·N‹???°NZN‰?°N?, N‡N‚?? ??Nˆ?????????°?µ??N‹?? ?? ???°??????N‹?? ???????µ??N‚ ???°???µN‚ ???µ ????NˆNˆ?µ??N‚?µ??
    reg head;       //???»N??¶?µ?±???°N? ???µNˆ?µ???µ?????°N?, ???????°?·N‹???°NZN‰?°N?, N‡N‚?? ???µN?N? ?·?°?????»???????? N?N????µN????? ??Nˆ????N?N‚    

	always @(posedge clk or posedge rst)
		if(rst)
			begin
				state_m <= st_idle; 
                fault <= 0;
                pdo_st <= 0;
                head <= 0;
			end	else 
			begin		
              if(pdo_st)              //????N‚?? N??±Nˆ??N? N????????°?»?° pdo_st
                  pdo_st <= 0;  
			   if(rx_busy)            //?•N??»?? ??Nˆ?????????°?µN‚N?N? ???°???µN‚
			   begin
                   if(rx_rdy&(~head))
                   begin
                      state_m <= state_m + 1;
                      if(~((cmp_data[7:0]==rx_data)||cmp_data[8]))  //?•N??»?? ?±?°??N‚ ???°???? ??Nˆ?????µNˆN?N‚N? ?? ???? ???µ Nˆ?°???µ?? N‚????N? ?·???°N‡?µ????NZ, ????N‚??Nˆ????N? ?±N‹ ???? ?????»?¶?µ?? ?±N‹?» ?±N‹ ?±N‹N‚N? Nˆ?°???µ??
						//if(!((cmp_data2[7:0] == rx_data) || (cmp_data2 == 9'd256)))  
						  fault <= 1;                                 //???°Nˆ????NˆN??µ?? ???°????N‹?? ???°???µN‚, ???°?? ?±??N‚N‹??
                      if(state_m==last_head)     //?•N??»?? ??Nˆ????N?N‚ ????N??»?µ???????? ?±?°??N‚ ?·?°?????»???????°, N‚??
                        head <= 1;               //??N‹N?N‚?°???»N??µ?? N„?»?°?? head ?? ?±???»N?N??µ ????N‡?µ???? ???µ ??Nˆ?????µNˆN??µ??
                   end
               end else
                   begin
                       if(state_m!=st_idle)                 //?•N??»?? N‚???»N????? N‡N‚?? ?·?°???µNˆN????»N?N? ??Nˆ??N'?? ???°???µN‚?°
                       begin
                         if(~fault)                         //?•N??»?? ???°???µN‚ ?±N‹?» ??Nˆ????N?N‚ ?±?µ?· ??N????±????
                            pdo_st <= 1;                    //N‚?? ??N‹N?N‚?°???»N??µ?? N?N‚Nˆ???± pdo_st    
                       end
                       //?'???·??Nˆ?°N‰?°?µ?? N??»N??¶?µ?±??N‹?µ ???µNˆ?µ???µ????N‹?µ ?? ???°N‡?°?»N???N‹?µ N???N?N‚??N?????N?
                       state_m <= st_idle;
                       fault   <= 0;
                       head <= 0;
                   end
            end





/*pdo_recv_ila YourInstanceName (
    .CONTROL(control), // INOUT BUS [35:0]
    .CLK(clk), // IN
    .TRIG0(cmp_data), // IN BUS [8:0]
    .TRIG1(rx_data), // IN BUS [7:0]
    .TRIG2(state_m), // IN BUS [11:0]
    .TRIG3(fault), // IN BUS [0:0]
    .TRIG4(head) // IN BUS [0:0]
); */




endmodule
